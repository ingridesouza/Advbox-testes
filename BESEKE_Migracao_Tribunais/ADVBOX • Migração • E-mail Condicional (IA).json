{
  "name": "ADVBOX • Migração • E-mail Condicional (IA)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "advbox/migracao/email",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        0,
        0
      ],
      "id": "1436567d-7615-4453-b514-ab7e710f6396",
      "name": "Webhook",
      "webhookId": "69ca62c9-faa0-4cf0-8cff-27ae902d386c"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"status\": \"ok\",\n  \"subject\": \"={{$json.subject}}\",\n  \"to\": \"={{$json.cliente_email}}\",\n  \"from\": \"={{$json.responsible_email}}\",\n  \"html_preview_len\": \"={{$json.html.length}}\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        3024,
        -160
      ],
      "id": "4867604d-0791-4fc8-9e6a-56a75c685f0d",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "jsCode": "// n8n Function — sanitize_input\nconst req = $json;\n\nconst payload = (req && typeof req.body === 'object' && Object.keys(req.body||{}).length)\n  ? req.body\n  : req;\n\n// Processo\nconst procArr = Array.isArray(payload[\"Dados do processo\"])\n  ? payload[\"Dados do processo\"]\n  : (payload.process ? [payload.process] : []);\nconst proc = procArr[0] || {};\n\n// Users ADVBOX\nconst usersAdvbox = Array.isArray(payload[\"Dados de usuários ADVBOX\"])\n  ? payload[\"Dados de usuários ADVBOX\"]\n  : (payload.usersAdvbox || []);\n\n// helpers\nconst pick = (re, s) => {\n  const m = String(s || \"\").match(re);\n  return m ? (m[1] || m[0]).toString().trim() : null;\n};\n\nconst notes = proc?.notes || payload?.notes || \"\";\n\nconst id_conta_from_notes = pick(/ID da conta:\\s*([0-9]+)/i, notes);\nconst cliente_email_from_notes =\n  pick(/E-?mail:\\s*([^\\s,;]+)/i, notes) ||\n  (notes.match(/\\(([^()\\s]+@[^\\s)]+)\\)/i)?.[1]?.toLowerCase() ?? null);\n\nconst responsible_nome_from_notes = pick(/Respons[aá]vel:\\s*([^\\r\\n]+)/i, notes);\n\nlet responsible_nome = proc?.responsible || responsible_nome_from_notes || null;\nlet responsible_email = null;\nconst book = usersAdvbox?.[0]?.users || [];\nif (responsible_nome) {\n  const u = book.find(u => (u.name||\"\").toUpperCase() === String(responsible_nome).toUpperCase());\n  responsible_email = u?.email ? String(u.email).toLowerCase() : null;\n}\nif (!responsible_email && proc?.responsible_id) {\n  const u = book.find(u => String(u.id) === String(proc.responsible_id));\n  if (u?.email) {\n    responsible_email = String(u.email).toLowerCase();\n    if (!responsible_nome) responsible_nome = u.name || responsible_nome;\n  }\n}\n\nreturn [{\n  json: {\n    raw: proc,                   \n    notes,\n    usersAdvbox,\n\n    id_conta: payload?.id_conta || proc?.protocol_number || id_conta_from_notes || null,\n    cliente_nome: payload?.nome_cliente || payload?.cliente_nome || proc?.customers?.[0]?.name || null,\n    cliente_email: payload?.cliente_email || cliente_email_from_notes || null,\n\n    responsible_nome,\n    responsible_email,\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        304,
        0
      ],
      "id": "718afb82-4146-4a4f-a73e-997d6a66910e",
      "name": "sanitize_input"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.deepseek.com/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Bearer sk-25dd2a84d9354e6481af1bb625f66078"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "={{ JSON.stringify({\n  model: \"deepseek-chat\",\n  temperature: 0,\n  max_tokens: 1200,\n  messages: [\n    {\n      role: \"system\",\n      content: \"Você é um extrator de campos. Responda APENAS com JSON válido.\"\n    },\n    {\n      role: \"user\",\n      content:\n        \"Extraia os campos do payload e responda APENAS com JSON no esquema: \" +\n        \"{ \\\"plano\\\": string|null, \\\"tipo_migracao\\\": \\\"tribunais\\\"|\\\"outros sistemas\\\"|\\\"planilhas\\\"|null, \" +\n        \"\\\"migrar\\\": {\\\"pessoas\\\":boolean,\\\"processos\\\":boolean,\\\"agenda\\\":boolean,\\\"financeiro\\\":boolean}, \" +\n        \"\\\"estados\\\":[\\\"UF\\\",...], \\\"cliente_nome\\\": string|null, \\\"cliente_email\\\": string|null, \" +\n        \"\\\"id_conta\\\": string|null, \\\"responsible_nome\\\": string|null, \\\"responsible_email\\\": string|null, \" +\n        \"\\\"estados_contratados\\\":[\\\"UF\\\",...], \\\"n_estados\\\": number } \\n\\nPAYLOAD:\\n\" +\n        JSON.stringify($json)\n    }\n  ]\n}) }}\n",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          },
          "timeout": 8000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        800,
        0
      ],
      "id": "25f4fb37-a9c2-4d8f-88a8-faa95d81c7d3",
      "name": "extract_fields_gemini",
      "retryOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// parse_gemini_json — une JSON do LLM sem apagar valores bons com null/\"\"\nconst base = $item(0).$node['sanitize_input']?.json || {};\n\nfunction parseLLM(j) {\n  // OpenAI-compatible\n  const ch = j?.choices?.[0];\n  const tc = ch?.message?.tool_calls?.[0];\n  if (tc?.type === 'function' && tc?.function?.arguments) {\n    return JSON.parse(tc.function.arguments);\n  }\n  if (typeof ch?.message?.content === 'string' && ch.message.content.trim()) {\n    return JSON.parse(ch.message.content);\n  }\n\n  const t = j?.candidates?.[0]?.content?.parts?.[0]?.text;\n  if (typeof t === 'string' && t.trim()) {\n    return JSON.parse(t);\n  }\n  return {};\n}\n\nconst fromLLMRaw = (() => {\n  try { return parseLLM(items[0].json || {}); }\n  catch { return {}; }\n})();\n\nconst filled = (v) =>\n  v !== undefined && v !== null &&\n  (typeof v !== 'string' || v.trim() !== '') &&\n  !(Array.isArray(v) && v.length === 0);\n\nconst out = { ...base };\n\nfor (const k of Object.keys(fromLLMRaw)) {\n  if (k === 'migrar' && typeof fromLLMRaw.migrar === 'object') continue; \n  if (filled(fromLLMRaw[k])) out[k] = fromLLMRaw[k];\n}\n\n// nested migrar \nif (typeof fromLLMRaw.migrar === 'object') {\n  out.migrar = { ...(base.migrar || {}) };\n  for (const kk of Object.keys(fromLLMRaw.migrar)) {\n    const v = fromLLMRaw.migrar[kk];\n    if (filled(v)) out.migrar[kk] = v;\n  }\n}\n\nif ((!out.n_estados || out.n_estados === 0) && Array.isArray(out.estados_contratados)) {\n  out.n_estados = out.estados_contratados.length;\n}\n\nreturn [{ json: out }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1248,
        0
      ],
      "id": "19ece7a6-db18-4ecd-929f-b98603929056",
      "name": "parse_gemini_json"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "04e63ad4-7e9f-47c8-86b3-c0efef0517e4",
              "leftValue": "={{$json[\"plano\"]}}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1488,
        0
      ],
      "id": "6f551a87-1fbc-4c85-ad00-f181cfa5e87b",
      "name": "if_llm_failed"
    },
    {
      "parameters": {
        "jsCode": "// n8n Function — regex_fallback\nconst base = { ...($items(\"sanitize_input\",0,0)?.json||{}), ...(items[0]?.json||{}) };\n\n// Se, por algum motivo, raw ainda vier como envelope, extraia dele:\nconst isEnvelope = base.raw && typeof base.raw === 'object' && base.raw.body;\nconst payload    = isEnvelope ? base.raw.body : {};\nconst proc       = isEnvelope\n  ? (Array.isArray(payload[\"Dados do processo\"]) ? payload[\"Dados do processo\"][0] : {})\n  : (base.raw || {});\n\nconst N = String(base.notes || proc.notes || \"\");       // texto onde faremos os regex\nconst usersAdv = (base.usersAdvbox?.length ? base.usersAdvbox\n                 : (isEnvelope ? (payload[\"Dados de usuários ADVBOX\"]||[]) : []));\n\n// helpers\nconst pick = (re, def=null) => { const m = N.match(re); return m ? (m[1]||m[0]).toString().trim() : def; };\nconst firstEmailLoose = () => { const m = N.match(/[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}/i); return m ? m[0].toLowerCase() : null; };\n\n// e-mail vindo do webhook (ou do payload, se estiver no envelope)\nconst cliente_email_in = base.cliente_email || (isEnvelope ? payload.cliente_email : null) || null;\n\n// extrações\nconst plano = pick(/Plano:\\s*([^-\\n]+)/i, base.plano || null);\n\nconst cliente_email =\n  pick(/E-?mail:\\s*([^\\s,;]+)/i, null) ||\n  (N.match(/\\(([^()\\s]+@[^\\s)]+)\\)/i)?.[1]?.toLowerCase() ?? null) ||\n  firstEmailLoose() ||\n  cliente_email_in;\n\nconst tipo_migracao =\n  /Migração por:\\s*tribunais/i.test(N) ? \"tribunais\" :\n  /Migração por:\\s*outros sistemas/i.test(N) ? \"outros sistemas\" :\n  /Migração por:\\s*planilhas/i.test(N) ? \"planilhas\" : (base.tipo_migracao || null);\n\nconst migrar = {\n  pessoas:    /Pessoas/i.test(N)    || !!base?.migrar?.pessoas,\n  processos:  /Processos/i.test(N)  || !!base?.migrar?.processos,\n  agenda:     /Agenda/i.test(N)     || !!base?.migrar?.agenda,\n  financeiro: /Financeiro/i.test(N) || !!base?.migrar?.financeiro,\n};\n\n// Estados em \"Diários: ...\"\nlet estados = [];\nconst diarios = pick(/Diários:\\s*([^\\.]+)\\./i, \"\");\nif (diarios) {\n  const map = { \"Maranhão\":\"MA\", \"Santa Catarina\":\"SC\", \"São Paulo\":\"SP\" };\n  diarios.split(/,\\s*/).forEach(s => {\n    const uf = map[s.trim()] || s.trim().toUpperCase();\n    if (/^[A-Z]{2}$/.test(uf)) estados.push(uf);\n  });\n}\nif (Array.isArray(base.estados) && base.estados.length) estados.push(...base.estados);\nestados = Array.from(new Set(estados));\n\n// demais campos\nconst id_conta         = pick(/ID da conta:\\s*([0-9]+)/i, base.id_conta || proc.protocol_number || null);\nconst cliente_nome     = base.cliente_nome || payload?.nome_cliente || proc.customers?.[0]?.name || null;\nconst responsible_nome = base.responsible_nome || proc.responsible || null;\n\n// e-mail do responsável via Users list\nlet responsible_email = (base.responsible_email || null);\nif (!responsible_email && usersAdv?.length && responsible_nome) {\n  const book = usersAdv[0]?.users || [];\n  const u = book.find(u => (u.name||\"\").toUpperCase() === String(responsible_nome).toUpperCase());\n  if (u?.email) responsible_email = String(u.email).toLowerCase();\n}\n\nreturn [{\n  json: {\n    ...base,\n    plano, tipo_migracao, migrar, estados,\n    cliente_nome, cliente_email, id_conta,\n    responsible_nome, responsible_email,\n    estados_contratados: estados,\n    n_estados: estados.length,\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1776,
        -160
      ],
      "id": "0abbc81b-afc7-4c9e-9ffa-a835d331d033",
      "name": "regex_fallback"
    },
    {
      "parameters": {
        "jsCode": "//normalize_rules\nconst x = items[0].json;\nconst normUF = (uf) => (uf || \"\").toString().trim().toUpperCase();\n\nx.estados = (x.estados||[]).map(normUF);\nx.estados_contratados = (x.estados_contratados?.length ? x.estados_contratados : x.estados || []).map(normUF);\n\n// detecta presença de sistemas no texto de notes (se disponível em ancestors)\nconst notes = $json.notes || \"\";\nconst has = (re) => new RegExp(re, \"i\").test(notes);\nconst sys = {\n  INSS: has(\"\\\\bINSS\\\\b\"),\n  SEEU: has(\"\\\\bSEEU\\\\b\"),\n  PROJUDI: has(\"\\\\bPROJUDI\\\\b\"),\n  PJE: has(\"\\\\bPJE\\\\b\"),\n  EPROC: has(\"\\\\bEPROC\\\\b|\\\\bPPE\\\\b\"),\n  CRETA: has(\"\\\\bCRETA\\\\b\")\n};\nx.sistemas = Object.keys(sys).filter(k => sys[k]);\n\n// grupo CRETA por UF (entra se houver qualquer UF do grupo)\nconst grupoCRETA = [\"AL\",\"CE\",\"PB\",\"RN\",\"SE\",\"PE\"];\nx.temGrupoCRETA = x.estados_contratados.some(uf => grupoCRETA.includes(uf));\n\n// opcional: detectar \"busca nacional\"\nx.busca_nacional = /\\bbusca nacional\\b/i.test(notes);\n\nx.n_estados = x.estados_contratados.length;\n\nreturn [{ json: x }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1984,
        -160
      ],
      "id": "97e281ca-fead-4f96-abf1-252df11590c5",
      "name": "normalize_rules"
    },
    {
      "parameters": {
        "jsCode": "// build_conditionals\nconst d = items[0].json;\n\n// blocos por UF\nconst byUF = {\n  \"MG\": \"Se o seu escritório possui processos físicos no TJMG, indique as comarcas em que haja ações tramitando ou pelo menos as principais. Caso não tenha, desconsidere.\",\n  \"RS\": \"Caso possua processos no EPROC TJRS ou no PPE, pode estar enviando o relatório dos seus processos em Excel disponibilizado pelo EPROC no menu na lateral esquerda, \\\"relatórios\\\". O PPE também possui essa opção.\",\n  \"BA\": \"Para que a busca dos seus processos possa ser ainda mais assertiva, peço que forneça seu login e senha do PJE TJBA.\",\n  \"PR\": \"Caso você possua processos do PROJUDI TJPR, não há necessidade de enviar comarcas e juízos. Envie o relatório dos seus processos no PROJUDI (passos a–d).\",\n  \"AM\": \"Caso você possua processos do PROJUDI TJAM/TJRR, não há necessidade de enviar comarcas e juízos, envie seu login e senha.\",\n  \"RR\": \"Caso você possua processos do PROJUDI TJAM/TJRR, não há necessidade de enviar comarcas e juízos, envie seu login e senha.\",\n  \"PE\": \"Para que a busca dos seus processos possa ser ainda mais assertiva, peço que forneça seu login e senha do PJE TJPE.\"\n};\n\nconst grupoCRETA = \"Se possuir processos no sistema CRETA: informamos que o sistema não permite a coleta pública de dados através do número da OAB. Encaminhe os números CNJ ou, se preferir, forneça o login e senha para captura dos dados.\";\n\nlet ufBlocks = [];\nfor (const uf of d.estados_contratados || []) {\n  if (byUF[uf]) ufBlocks.push(`• ${uf}: ${byUF[uf]}`);\n}\nconst grupoNE = [\"AL\",\"CE\",\"PB\",\"RN\",\"SE\",\"PE\"];\nif ((d.estados_contratados||[]).some(uf => grupoNE.includes(uf))) {\n  ufBlocks.push(`• Grupo CRETA (AL/CE/PB/RN/SE/PE): ${grupoCRETA}`);\n}\nufBlocks = Array.from(new Set(ufBlocks)); // sem duplicar\n\n// blocos por sistema\nconst bySYS = {\n  \"INSS\": \"Se o escritório possuir processos no INSS, é possível realizar essa migração. Envie via GERID: (a) liste requerimentos e filtre ativos; (b) copie a tabela a partir de “protocolo” e cole em Excel.\",\n  \"SEEU\": \"Caso possua processos no SEEU, encaminhe o relatório do sistema (Estatísticas > Relatório dinâmico > Meus processos; passos a–d). Preferir Excel; se possível, apenas processos ativos.\"\n};\nlet sysBlocks = [];\nfor (const s of d.sistemas || []) if (bySYS[s]) sysBlocks.push(`• ${s}: ${bySYS[s]}`);\n\nif (d.busca_nacional) {\n  sysBlocks.push(\"• Busca nacional: Informe os principais tribunais, onde se concentram a maioria dos processos e a principal área de atuação.\");\n}\n\nreturn [{\n  json: { ...d, ufBlocks, sysBlocks }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2192,
        -160
      ],
      "id": "4af75659-808d-4bed-9b8f-2f30376aeea7",
      "name": "build_conditionals"
    },
    {
      "parameters": {
        "sendTo": "={{ $json.to || $json.cliente_email }}",
        "subject": "={{$json.subject}}",
        "message": "={{$json.html}}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        2720,
        -160
      ],
      "id": "329fd2c5-c50f-4349-ac4f-23a288518950",
      "name": "Send a message",
      "webhookId": "56062b50-6e4a-4616-9752-5cdab500a28f",
      "credentials": {
        "gmailOAuth2": {
          "id": "PJAVoYiSLyjRFoYm",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// n8n Function — pass_llm\nconst upstream = $items(\"sanitize_input\", 0, 0).json; // preserva cliente_email e cia\nconst llm = items[0].json || {};\nreturn [{\n  json: {\n    ...upstream,\n    ...llm,\n    // garante que não perca o e-mail se o LLM não retornou\n    cliente_email: llm.cliente_email || upstream.cliente_email || null,\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1696,
        96
      ],
      "id": "c4982d67-d0e1-4c4b-a560-cfedda05a03f",
      "name": "pass_llm"
    },
    {
      "parameters": {
        "jsCode": "// n8n Function — build_html_email\nconst v = items[0].json;\n\n// Helpers\nconst clean = (s) =>\n  (s ?? \"\")\n    .toString()\n    // remove quebras reais e literais \"\\n\"\n    .replace(/\\r?\\n/g, \" \")\n    .replace(/\\\\n/g, \" \")\n    .replace(/\\s+/g, \" \")\n    .trim();\nconst safe = (s) => clean(s);\n\n// Nome para saudação/assunto (com fallbacks)\nconst displayName = safe(\n  v.cliente_nome ||\n  v.nome_cliente ||\n  v.customers?.[0]?.name ||\n  v.raw?.customers?.[0]?.name ||\n  \"Cliente\"\n);\n\n// Contagem de estados (fallback se n_estados não vier preenchido)\nconst nEstados =\n  Number.isFinite(v.n_estados)\n    ? v.n_estados\n    : Array.isArray(v.estados_contratados)\n      ? v.estados_contratados.length\n      : Array.isArray(v.estados)\n        ? v.estados.length\n        : 0;\n\n// ===== conteúdo do e-mail =====\nconst itensBase = `\n<ol>\n  <li>Informe o Nome completo, OAB e CPF dos advogados que devemos capturar os processos para realizar a migração na sua conta:</li>\n  <li>Informe o número aproximado de processos judiciais ativos;<br>\n      Informe o número aproximado de processos totais com arquivados (apenas controle interno):</li>\n  <li>Os Estados e sistema contratados para a migração foram: <strong>${safe((v.estados_contratados || []).join(\", \") || \"—\")}</strong></li>\n  <li>Listar os tribunais de atuação dos Estados contratados (ex: TJPR, TRT1, TRF2, JFRN, STJ):</li>\n  <li>Caso possua, enviar planilha (Excel) com processos (apenas CNJ válido será considerado):</li>\n  <li>Se tiver processos no PJE, enviar login e senha e indicar qual PJE:</li>\n</ol>`.trim();\n\nconst condicionais = []\n  .concat(v.ufBlocks?.length ? [`<h3>Condições específicas por Estado</h3><p>${v.ufBlocks.map(safe).join(\"<br>\")}</p>`] : [])\n  .concat(v.sysBlocks?.length ? [`<h3>Condições específicas por Sistema</h3><p>${v.sysBlocks.map(safe).join(\"<br>\")}</p>`] : [])\n  .join(\"\");\n\n// Cabeçalho\nconst header = `\n<p>Olá <strong>${displayName}</strong>,</p>\n<p>Primeiramente, parabéns pela contratação, é um prazer ter você e sua equipe conosco!</p>\n<p>Sou <strong>${safe(v.responsible_nome || \"Analista ADVBOX\")}</strong>, analista responsável pela migração de seus dados para a ADVBOX e será um prazer lhe auxiliar.</p>\n<p>Meu atendimento será exclusivamente por aqui para sua segurança, transparência e registro. Por gentileza, confirme o recebimento.</p>\n<p>Para facilitar, este e-mail está dividido em 3 partes:</p>\n<ul>\n  <li>Parte 1: Confirmação da forma de migração e informações iniciais</li>\n  <li>Parte 2: Informações sobre os dados que serão migrados</li>\n  <li>Parte 3: Passo a passo e instruções</li>\n</ul>\n`.trim();\n\nconst parte1 = `\n<h2>Parte 1 — Confirmações iniciais</h2>\n<p><strong>Plano:</strong> ${safe(v.plano)} &nbsp; | &nbsp; <strong>Tipo de migração:</strong> ${safe(v.tipo_migracao)}</p>\n<p><strong>O que será migrado:</strong> ${\n  [\"pessoas\",\"processos\",\"agenda\",\"financeiro\"]\n    .filter(k => v.migrar?.[k])\n    .map(s => s.toUpperCase())\n    .join(\", \") || \"—\"\n}</p>\n<p><strong>Estados contratados (${nEstados}):</strong> ${safe((v.estados_contratados || []).join(\", \") || \"—\")}</p>\n${itensBase}\n${condicionais}\n`.trim();\n\nconst parte2 = `\n<h2>Parte 2 — Sobre os dados</h2>\n<p>Os dados serão tratados conforme limites e escopo contratados. Em necessidades adicionais, alinharemos previamente.</p>\n`.trim();\n\n// Link da proposta (se existir em notes)\nconst proposalLink =\n  (v.notes || v.raw?.notes || \"\")\n    .match(/https?:\\/\\/\\S+/)?.[0];\n\nconst parte3 = `\n<h2>Parte 3 — Passo a passo</h2>\n<ol>\n  <li>Responder este e-mail com os itens solicitados na Parte 1.</li>\n  <li>Validação em até 48h após o recebimento dos dados válidos.</li>\n  <li>Prazo ideal: 3 dias úteis • Prazo fatal: 5 dias úteis • Excepcional: 10 dias úteis.</li>\n</ol>\n${proposalLink ? `<p><strong>Proposta:</strong> <a href=\"${proposalLink}\">${proposalLink}</a></p>` : \"\"}\n<p>Qualquer dúvida, fico à disposição.</p>\n<p>Atenciosamente,<br>\n<strong>${safe(v.responsible_nome || \"Equipe ADVBOX\")}</strong><br>\n${safe(v.responsible_email || \"suporte@advbox.com.br\")}</p>\n`.trim();\n\nconst html = `\n<!doctype html><html><head><meta charset=\"utf-8\">\n<style>\n  body{font-family:Arial,Helvetica,sans-serif;line-height:1.5;color:#222}\n  h2{margin:24px 0 8px}\n  h3{margin:16px 0 6px}\n  ol,ul{margin:8px 0 12px 20px}\n  p{margin:8px 0}\n  a{color:#0a5}\n</style>\n</head><body>\n${header}\n${parte1}\n${parte2}\n${parte3}\n</body></html>`.trim();\n\n// Assunto (sem “•” extra quando não houver nome)\nconst subject =\n  `Migração ADVBOX • Conta ${safe(v.id_conta || \"—\")}` +\n  (displayName && displayName !== \"Cliente\" ? ` • ${displayName}` : \"\");\n\n// --- resolver destinatário ---\nfunction pickEmail(text) {\n  if (!text) return null;\n  const m = String(text).match(/[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}/i);\n  return m ? m[0].toLowerCase() : null;\n}\n\n// ordem de preferência: v.to > v.cliente_email > e-mail explícito nas notes\nlet to =\n  pickEmail(v.to) ||\n  pickEmail(v.cliente_email) ||\n  pickEmail(v.notes) ||\n  pickEmail(v.raw?.notes);\n\n// validação hard-stop para evitar erro no Gmail\nif (!to) {\n  throw new Error(`To vazio ou inválido. Verifique sanitize_input/regex_fallback ou passe cliente_email no webhook.`);\n}\n\nreturn [{\n  json: {\n    ...v,\n    subject,\n    html,\n    to,                 // usar este no Gmail\n    cliente_email: to,  // compat com nós antigos\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2400,
        -160
      ],
      "id": "bbd667d8-d152-4c36-9e28-f0280b7c8263",
      "name": "build_html_email"
    },
    {
      "parameters": {
        "jsCode": "// llm_http_guard\nconst r = items[0].json || {};\nconst status = r.statusCode || r.code || r.error?.code;\nconst hasErr = !!r.error || (status && Number(status) >= 400);\nreturn hasErr ? [{ json: { __llm_fail: true } }] : items;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1008,
        0
      ],
      "id": "f31b6a6e-552d-40da-8dea-5d17cfea8fd4",
      "name": "llm_http_guard"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "sanitize_input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Webhook": {
      "main": [
        []
      ]
    },
    "sanitize_input": {
      "main": [
        [
          {
            "node": "extract_fields_gemini",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "extract_fields_gemini": {
      "main": [
        [
          {
            "node": "llm_http_guard",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "parse_gemini_json": {
      "main": [
        [
          {
            "node": "if_llm_failed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "if_llm_failed": {
      "main": [
        [
          {
            "node": "regex_fallback",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "pass_llm",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "regex_fallback": {
      "main": [
        [
          {
            "node": "normalize_rules",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "normalize_rules": {
      "main": [
        [
          {
            "node": "build_conditionals",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "build_conditionals": {
      "main": [
        [
          {
            "node": "build_html_email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a message": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "pass_llm": {
      "main": [
        [
          {
            "node": "normalize_rules",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "build_html_email": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "llm_http_guard": {
      "main": [
        [
          {
            "node": "parse_gemini_json",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "418208cc-b3db-442b-955e-7ad755755f71",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f773747b0326014ce05070230d6396ff617691b37de5590ce8a989067a6988f5"
  },
  "id": "QVZkdU20L5bknxkm",
  "tags": []
}